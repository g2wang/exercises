/**
749. Contain Virus
Hard

A virus is spreading rapidly, and your task is to quarantine the infected area
by installing walls.

The world is modeled as a 2-D array of cells, where 0 represents uninfected
cells, and 1 represents cells contaminated with the virus. A wall (and only one
wall) can be installed between any two 4-directionally adjacent cells, on the
shared boundary.

Every night, the virus spreads to all neighboring cells in all four directions
unless blocked by a wall. Resources are limited. Each day, you can install
walls around only one region -- the affected area (continuous block of infected
cells) that threatens the most uninfected cells the following night. There will
never be a tie.

Can you save the day? If so, what is the number of walls required? If not, and
the world becomes fully infected, return the number of walls used.

Example 1:
Input: grid =
[[0,1,0,0,0,0,0,1],
 [0,1,0,0,0,0,0,1],
 [0,0,0,0,0,0,0,1],
 [0,0,0,0,0,0,0,0]]
Output: 10
Explanation:
There are 2 contaminated regions.
On the first day, add 5 walls to quarantine the viral region on the left. The
board after the virus spreads is:

[[0,1,0,0,0,0,1,1],
 [0,1,0,0,0,0,1,1],
 [0,0,0,0,0,0,1,1],
 [0,0,0,0,0,0,0,1]]

On the second day, add 5 walls to quarantine the viral region on the right. The
virus is fully contained.

Example 2:
Input: grid =
[[1,1,1],
 [1,0,1],
 [1,1,1]]
Output: 4
Explanation: Even though there is only one cell saved, there are 4 walls built.
Notice that walls are only built on the shared boundary of two different cells.

Example 3:
Input: grid =
[[1,1,1,0,0,0,0,0,0],
 [1,0,1,0,1,1,1,1,1],
 [1,1,1,0,0,0,0,0,0]]
Output: 13
Explanation: The region on the left only builds two new walls.

Note:
1. The number of rows and columns of grid will each be in the range [1, 50].
2. Each grid[i][j] will be either 0 or 1.
3. Throughout the described process, there is always a contiguous viral region
    that will infect strictly more uncontaminated squares in the next round.

 */

import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;

/**
 * Not object-oriented, but fast
 */
public class ContainVirusFast {

    public static void main(String[] args) {
        List<int[][]> inputs = new ArrayList<>();
        inputs.add(new int[][] { // ans: 10
                {0,1,0,0,0,0,0,1},
                {0,1,0,0,0,0,0,1},
                {0,0,0,0,0,0,0,1},
                {0,0,0,0,0,0,0,0}
            });
        inputs.add(new int[][] { // ans: 4
                {1,1,1},
                {1,0,1},
                {1,1,1}
            });
        inputs.add(new int[][] { // ans: 13
                {1,1,1,0,0,0,0,0,0},
                {1,0,1,0,1,1,1,1,1},
                {1,1,1,0,0,0,0,0,0}
            });
        inputs.add(new int[][] { // ans: 1
                {1,0,1}
            });
        inputs.add(new int[][] { // ans: 16
                {0,1,0,0,0,0,0,1},
                {0,1,0,1,0,0,0,1},
                {0,0,0,0,0,0,0,1}
            });
        inputs.add(new int[][] { // ans: 56
                {0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,1,0,0},
                {1,0,0,0,0,0,0,0,0,0},
                {0,0,1,0,0,0,1,0,0,0},
                {0,0,0,0,0,0,1,0,0,0},
                {0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,1,0},
                {0,0,0,0,1,0,1,0,0,0},
                {0,0,0,0,0,0,0,0,0,0}
            });
        inputs.add(new int[][] {
                {0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0},
                {1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0},
                {0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0},
                {0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0},
                {0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0},
                {0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0},
                {0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0},
                {1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0},
                {0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0},
                {0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0},
                {0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0},
                {0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0},
                {0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0},
                {1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0},
                {0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0},
                {0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0},
                {0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0},
                {0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0},
                {0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0},
                {1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0},
                {0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0},
                {0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0},
                {0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0},
                {0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0},
                {0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0},
                {1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0},
                {0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0},
                {0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0},
                {0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0},
                {0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0},
                {0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0},
                {1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0},
                {0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0},
                {0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0},
                {0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0},
                {0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0},
                {0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0},
                {1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0},
                {0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0},
                {0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0},
                {0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0},
                {0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0},
                {0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0},
                {1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0},
                {0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0},
                {0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0},
                {0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0},
                {0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0},
                {0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0}
            });

        List<Integer> answers = new ArrayList<>(inputs.size());
        ContainVirusFast cv = new ContainVirusFast();
        long startTime = System.currentTimeMillis();
        for (int[][] grid : inputs) {
            answers.add(cv.containVirus(grid));
        }
        long span = System.currentTimeMillis() - startTime;
        System.out.printf("algo: fast; ans: %s; time: %d%n", answers.toString(), span);
    }

    int[][] grid;
    int[][] moves = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
    int regionId = 1;
    int li, lj;
    
    public int containVirus(int[][] grid) {
        this.grid = grid;
        this.li = grid.length;
        this.lj = grid[0].length;
        int ans = 0;
        
        while (true) {
            int regionIdThreshold = regionId;
            int maxNumThreats = 0;
            int numWallsNeeded = 0;
            int toBeContainedRegionId = 0;
            int toBeContainedOriginI = -1;
            int toBeContainedOriginJ = -1;

            for (int i = 0; i < li; i++) {
                for (int j = 0; j < lj; j++) {
                    int g = grid[i][j];
                    if (g > 0 && g <= regionIdThreshold) {
                        int[] threatsAndWalls = dfs(++regionId, i, j);
                        if (threatsAndWalls[0] > maxNumThreats) {
                            maxNumThreats = threatsAndWalls[0]; 
                            numWallsNeeded = threatsAndWalls[1];
                            toBeContainedRegionId = regionId; 
                            toBeContainedOriginI = i;
                            toBeContainedOriginJ = j;
                        } 
                    }
                }
            }

            if (toBeContainedRegionId > 0) {
                ans += numWallsNeeded;
                contain(toBeContainedRegionId,
                        toBeContainedOriginI, toBeContainedOriginJ);
            } else {
                break; 
            } 
            
            regionIdThreshold = regionId;
            
            for (int i = 0; i < li; i++) {
                for (int j = 0; j < lj; j++) {
                    int g = grid[i][j];
                    if (g > 0 && g <= regionIdThreshold) {
                        infect(++regionId, i, j, regionIdThreshold);
                    }
                }
            }
        }
       
        return ans;
    }

    private int[] dfs(int regionId, int i, int j) {
        int numThreats = 0;
        int numWalls = 0;
        grid[i][j] = regionId;
        for (int[] m : moves) {
            int ni = i + m[0];
            int nj = j + m[1];
            if (ni >= 0 && ni < li && nj >= 0 && nj <lj) {
                int gn = grid[ni][nj];
                if (gn <= 0 && gn != -1) {
                    numWalls++;
                    if (gn != -regionId) {
                        grid[ni][nj] = -regionId;
                        numThreats++;
                    }
                } else if (gn > 0 && gn != regionId) {
                    int[] a = dfs(regionId, ni, nj);
                    numThreats += a[0];
                    numWalls += a[1];
                }
            }
        }
        return new int[]{numThreats, numWalls};
    }
    
    private void infect(int regionId, int i, int j, int regionIdThreshold) {
        grid[i][j] = regionId;
        for (int[] m : moves) {
            int ni = i + m[0];
            int nj = j + m[1];
            if (ni >= 0 && ni < li && nj >= 0 && nj < lj) {
                int gn = grid[ni][nj];
                if (gn <= 0 && gn != -1) {
                    grid[ni][nj] = regionId;
                } else if (gn > 0 && gn <= regionIdThreshold) {
                    infect(regionId, ni, nj, regionIdThreshold);
                }
            }
        }
    }
    
    private void contain(int regionId, int i, int j) {
        grid[i][j] = -1;
        for (int[] m : moves) {
            int ni = i + m[0];
            int nj = j + m[1];
            if (ni >= 0 && ni < li && nj >= 0 && nj < lj) {
                if (grid[ni][nj] == regionId) {
                    contain(regionId, ni, nj);
                }
            }
        }
    }
    
}
