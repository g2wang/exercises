/**
749. Contain Virus
Hard

A virus is spreading rapidly, and your task is to quarantine the infected area
by installing walls.

The world is modeled as a 2-D array of cells, where 0 represents uninfected
cells, and 1 represents cells contaminated with the virus. A wall (and only one
wall) can be installed between any two 4-directionally adjacent cells, on the
shared boundary.

Every night, the virus spreads to all neighboring cells in all four directions
unless blocked by a wall. Resources are limited. Each day, you can install
walls around only one region -- the affected area (continuous block of infected
cells) that threatens the most uninfected cells the following night. There will
never be a tie.

Can you save the day? If so, what is the number of walls required? If not, and
the world becomes fully infected, return the number of walls used.

Example 1:
Input: grid =
[[0,1,0,0,0,0,0,1],
 [0,1,0,0,0,0,0,1],
 [0,0,0,0,0,0,0,1],
 [0,0,0,0,0,0,0,0]]
Output: 10
Explanation:
There are 2 contaminated regions.
On the first day, add 5 walls to quarantine the viral region on the left. The
board after the virus spreads is:

[[0,1,0,0,0,0,1,1],
 [0,1,0,0,0,0,1,1],
 [0,0,0,0,0,0,1,1],
 [0,0,0,0,0,0,0,1]]

On the second day, add 5 walls to quarantine the viral region on the right. The
virus is fully contained.

Example 2:
Input: grid =
[[1,1,1],
 [1,0,1],
 [1,1,1]]
Output: 4
Explanation: Even though there is only one cell saved, there are 4 walls built.
Notice that walls are only built on the shared boundary of two different cells.

Example 3:
Input: grid =
[[1,1,1,0,0,0,0,0,0],
 [1,0,1,0,1,1,1,1,1],
 [1,1,1,0,0,0,0,0,0]]
Output: 13
Explanation: The region on the left only builds two new walls.

Note:
1. The number of rows and columns of grid will each be in the range [1, 50].
2. Each grid[i][j] will be either 0 or 1.
3. Throughout the described process, there is always a contiguous viral region
    that will infect strictly more uncontaminated squares in the next round.

 */

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

/**
 * Object-oriented approach
 */
public class ContainVirusOO {

    public static void main(String[] args) {
        List<int[][]> inputs = new ArrayList<>();
        inputs.add(new int[][] { // ans: 10
                {0,1,0,0,0,0,0,1},
                {0,1,0,0,0,0,0,1},
                {0,0,0,0,0,0,0,1},
                {0,0,0,0,0,0,0,0}
            });
        inputs.add(new int[][] { // ans: 4
                {1,1,1},
                {1,0,1},
                {1,1,1}
            });
        inputs.add(new int[][] { // ans: 13
                {1,1,1,0,0,0,0,0,0},
                {1,0,1,0,1,1,1,1,1},
                {1,1,1,0,0,0,0,0,0}
            });
        inputs.add(new int[][] { // ans: 1
                {1,0,1}
            });
        inputs.add(new int[][] { // ans: 16
                {0,1,0,0,0,0,0,1},
                {0,1,0,1,0,0,0,1},
                {0,0,0,0,0,0,0,1}
            });
        inputs.add(new int[][] { // ans: 56
                {0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,1,0,0},
                {1,0,0,0,0,0,0,0,0,0},
                {0,0,1,0,0,0,1,0,0,0},
                {0,0,0,0,0,0,1,0,0,0},
                {0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,1,0},
                {0,0,0,0,1,0,1,0,0,0},
                {0,0,0,0,0,0,0,0,0,0}
            });
        inputs.add(new int[][] {
                {0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0},
                {1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0},
                {0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0},
                {0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0},
                {0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0},
                {0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0},
                {0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0},
                {1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0},
                {0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0},
                {0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0},
                {0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0},
                {0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0},
                {0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0},
                {1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0},
                {0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0},
                {0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0},
                {0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0},
                {0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0},
                {0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0},
                {1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0},
                {0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0},
                {0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0},
                {0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0},
                {0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0},
                {0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0},
                {1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0},
                {0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0},
                {0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0},
                {0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0},
                {0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0},
                {0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0},
                {1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0},
                {0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0},
                {0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0},
                {0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0},
                {0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0},
                {0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0},
                {1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0},
                {0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0},
                {0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0},
                {0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0},
                {0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0},
                {0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,1,0,0},
                {1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0},
                {0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0, 0,0,1,0,0,0,1,0,0,0},
                {0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,1,0,0,0},
                {0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,0},
                {0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0, 0,0,0,0,1,0,1,0,0,0},
                {0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0}
            });

        List<Integer> answers = new ArrayList<>(inputs.size());
        ContainVirusOO cv = new ContainVirusOO();
        long startTime = System.currentTimeMillis();
        for (int[][] grid : inputs) {
            answers.add(cv.containVirus(grid));
        }
        long span = System.currentTimeMillis() - startTime;
        System.out.printf("algo:   oo; ans: %s; time: %d%n", answers.toString(), span);
    }

    private int[][] grid;
    private Map<Integer, Region> regionsMap = new HashMap<>();
    private static final int[][] moves = new int[][]{{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
    int regionId = 1;

    public int containVirus(int[][] grid) {
        this.grid = grid;
        Region mostDangerousRegion = null;
        int mostDangerousCapacity = 0;
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                if (grid[i][j] == 1) {
                    Region region = new Region(++regionId, new Cell(i, j));
                    if (!region.pristineShell.isEmpty()) {
                        regionsMap.put(regionId, region);
                        if (region.pristineShell.size() > mostDangerousCapacity) {
                            mostDangerousCapacity = region.pristineShell.size();
                            mostDangerousRegion = region;
                        }
                    }
                }
            }
        }

        int ans = 0;
        while (!regionsMap.isEmpty()) {
            ans += mostDangerousRegion.contain();
            for (Region r : regionsMap.values()) {
                r.infect();
            }
            mostDangerousCapacity = 0;
            Map<Integer, Region> newRegionsMap = new HashMap<>();
            for (Region r : regionsMap.values()) {
                Cell oc = r.originCell;
                if (r.id == grid[oc.i][oc.j]) {
                    Region nr = new Region(++regionId, oc);
                    if (!nr.pristineShell.isEmpty()) {
                        newRegionsMap.put(regionId, nr);
                        if (nr.pristineShell.size() > mostDangerousCapacity) {
                            mostDangerousCapacity = nr.pristineShell.size();
                            mostDangerousRegion = nr;
                        }
                    }
                }
            }

            regionsMap = newRegionsMap;
        }

        return ans;
    }

    private class Cell {
        int i; int j;

        public Cell(int i, int j) {
            this.i = i; this.j = j;
        }

        public List<Cell> getNeighbors() {
            List<Cell> neighbors = new ArrayList<>(4);
            for (int[] move : moves) {
                int im = i + move[0];  int jm = j + move[1];
                if (im >= 0 && im < grid.length && jm >= 0 && jm < grid[0].length) {
                    neighbors.add(new Cell(im, jm));
                }
            }
            return neighbors;
        }
    }

    private class Region {
        int id;
        Cell originCell;
        List<Cell> pristineShell = new ArrayList<>();
        int numWallsRequired = 0;

        public Region(int id, Cell originCell) {
            this.id = id; this.originCell = originCell;
            dfsExpand(originCell);
        }

        private void dfsExpand(Cell cell) {
            paintWithId(cell, true);
            for (Cell n : cell.getNeighbors()) {
                int cellValue = grid[n.i][n.j];
                if (cellValue <= 0) {
                    if (cellValue != -id) {
                        paintWithId(n, false);
                        pristineShell.add(n);
                    }
                    numWallsRequired++;
                } else if (cellValue == 1) {
                    dfsExpand(n);
                } else if (cellValue != id && regionsMap.containsKey(cellValue)) {
                    dfsExpand(n);
                }
            }
        }

        private void paintWithId(Cell cell, boolean positive) {
            grid[cell.i][cell.j] = (positive?1:-1)*id;
        }

        public int contain() {
            regionsMap.remove(id);
            return numWallsRequired;
        }

        public void infect() {
            for (Cell c : pristineShell) {
                grid[c.i][c.j] = id;
            }
            pristineShell.clear();
        }
    }
}
