/**
315. Count of Smaller Numbers After Self
Hard

You are given an integer array nums and you have to return a new counts array. The counts array has the property where counts[i] is the number of smaller elements to the right of nums[i].

Example:

Input: [5,2,6,1]
Output: [2,1,1,0] 
Explanation:
To the right of 5 there are 2 smaller elements (2 and 1).
To the right of 2 there is only 1 smaller element (1).
To the right of 6 there is 1 smaller element (1).
To the right of 1 there is 0 smaller element. 
 */

import java.util.Arrays;
import java.util.List;
import java.util.LinkedList;
import java.util.Map;
import java.util.HashMap;
import java.util.Collections;

public class CountSmaller {

    public static void main(String[] args) {
        int[] input = {
            10, 2, 5, 101, 6, 100 ,2, 6, 105, 6, 30, 5, 250, 11, 93, 6, 100, 2, 5, 6, 6, 99, 80,
            10, 2, 5, 101, 6, 100 ,2, 6, 105, 6, 30, 5, 250, 11, 93, 6, 100, 2, 5, 6, 6, 99, 80,
            10, 2, 5, 101, 6, 100 ,2, 6, 105, 6, 30, 5, 250, 11, 93, 6, 100, 2, 5, 6, 6, 99, 80,
            10, 2, 5, 101, 6, 100 ,2, 6, 105, 6, 30, 5, 250, 11, 93, 6, 100, 2, 5, 6, 6, 99, 80,
            10, 2, 5, 101, 6, 100 ,2, 6, 105, 6, 30, 5, 250, 11, 93, 6, 100, 2, 5, 6, 6, 99, 80,
            10, 2, 5, 101, 6, 100 ,2, 6, 105, 6, 30, 5, 250, 11, 93, 6, 100, 2, 5, 6, 6, 99, 80,
            10, 2, 5, 101, 6, 100 ,2, 6, 105, 6, 30, 5, 250, 11, 93, 6, 100, 2, 5, 6, 6, 99, 80,
            10, 2, 5, 101, 6, 100 ,2, 6, 105, 6, 30, 5, 250, 11, 93, 6, 100, 2, 5, 6, 6, 99, 80,
            10, 2, 5, 101, 6, 100 ,2, 6, 105, 6, 30, 5, 250, 11, 93, 6, 100, 2, 5, 6, 6, 99, 80,
            10, 2, 5, 101, 6, 100 ,2, 6, 105, 6, 30, 5, 250, 11, 93, 6, 100, 2, 5, 6, 6, 99, 80,
            10, 2, 5, 101, 6, 100 ,2, 6, 105, 6, 30, 5, 250, 11, 93, 6, 100, 2, 5, 6, 6, 99, 80,
            10, 2, 5, 101, 6, 100 ,2, 6, 105, 6, 30, 5, 250, 11, 93, 6, 100, 2, 5, 6, 6, 99, 80,
            10, 2, 5, 101, 6, 100 ,2, 6, 105, 6, 30, 5, 250, 11, 93, 6, 100, 2, 5, 6, 6, 99, 80,
            10, 2, 5, 101, 6, 100 ,2, 6, 105, 6, 30, 5, 250, 11, 93, 6, 100, 2, 5, 6, 6, 99, 80,
            10, 2, 5, 101, 6, 100 ,2, 6, 105, 6, 30, 5, 250, 11, 93, 6, 100, 2, 5, 6, 6, 99, 80,
            10, 2, 5, 101, 6, 100 ,2, 6, 105, 6, 30, 5, 250, 11, 93, 6, 100, 2, 5, 6, 6, 99, 80,
            10, 2, 5, 101, 6, 100 ,2, 6, 105, 6, 30, 5, 250, 11, 93, 6, 100, 2, 5, 6, 6, 99, 80,
            10, 2, 5, 101, 6, 100 ,2, 6, 105, 6, 30, 5, 250, 11, 93, 6, 100, 2, 5, 6, 6, 99, 80,
            10, 2, 5, 101, 6, 100 ,2, 6, 105, 6, 30, 5, 250, 11, 93, 6, 100, 2, 5, 6, 6, 99, 80,
            10, 2, 5, 101, 6, 100 ,2, 6, 105, 6, 30, 5, 250, 11, 93, 6, 100, 2, 5, 6, 6, 99, 80,
            10, 2, 5, 101, 6, 100 ,2, 6, 105, 6, 30, 5, 250, 11, 93, 6, 100, 2, 5, 6, 6, 99, 80,
            10, 2, 5, 101, 6, 100 ,2, 6, 105, 6, 30, 5, 250, 11, 93, 6, 100, 2, 5, 6, 6, 99, 80,
            10, 2, 5, 101, 6, 100 ,2, 6, 105, 6, 30, 5, 250, 11, 93, 6, 100, 2, 5, 6, 6, 99, 80,
            10, 2, 5, 101, 6, 100 ,2, 6, 105, 6, 30, 5, 250, 11, 93, 6, 100, 2, 5, 6, 6, 99, 80,
            10, 2, 5, 101, 6, 100 ,2, 6, 105, 6, 30, 5, 250, 11, 93, 6, 100, 2, 5, 6, 6, 99, 80,
            10, 2, 5, 101, 6, 100 ,2, 6, 105, 6, 30, 5, 250, 11, 93, 6, 100, 2, 5, 6, 6, 99, 80,
            10, 2, 5, 101, 6, 100 ,2, 6, 105, 6, 30, 5, 250, 11, 93, 6, 100, 2, 5, 6, 6, 99, 80,
            10, 2, 5, 101, 6, 100 ,2, 6, 105, 6, 30, 5, 250, 11, 93, 6, 100, 2, 5, 6, 6, 99, 80,
            10, 2, 5, 101, 6, 100 ,2, 6, 105, 6, 30, 5, 250, 11, 93, 6, 100, 2, 5, 6, 6, 99, 80,
            10, 2, 5, 101, 6, 100 ,2, 6, 105, 6, 30, 5, 250, 11, 93, 6, 100, 2, 5, 6, 6, 99, 80,
            10, 2, 5, 101, 6, 100 ,2, 6, 105, 6, 30, 5, 250, 11, 93, 6, 100, 2, 5, 6, 6, 99, 80,
            10, 2, 5, 101, 6, 100 ,2, 6, 105, 6, 30, 5, 250, 11, 93, 6, 100, 2, 5, 6, 6, 99, 80,
            10, 2, 5, 101, 6, 100 ,2, 6, 105, 6, 30, 5, 250, 11, 93, 6, 100, 2, 5, 6, 6, 99, 80,
            10, 2, 5, 101, 6, 100 ,2, 6, 105, 6, 30, 5, 250, 11, 93, 6, 100, 2, 5, 6, 6, 99, 80,
            10, 2, 5, 101, 6, 100 ,2, 6, 105, 6, 30, 5, 250, 11, 93, 6, 100, 2, 5, 6, 6, 99, 80,
            10, 2, 5, 101, 6, 100 ,2, 6, 105, 6, 30, 5, 250, 11, 93, 6, 100, 2, 5, 6, 6, 99, 80,
            10, 2, 5, 101, 6, 100 ,2, 6, 105, 6, 30, 5, 250, 11, 93, 6, 100, 2, 5, 6, 6, 99, 80,
            10, 2, 5, 101, 6, 100 ,2, 6, 105, 6, 30, 5, 250, 11, 93, 6, 100, 2, 5, 6, 6, 99, 80,
            10, 2, 5, 101, 6, 100 ,2, 6, 105, 6, 30, 5, 250, 11, 93, 6, 100, 2, 5, 6, 6, 99, 80,
            10, 2, 5, 101, 6, 100 ,2, 6, 105, 6, 30, 5, 250, 11, 93, 6, 100, 2, 5, 6, 6, 99, 80,
            10, 2, 5, 101, 6, 100 ,2, 6, 105, 6, 30, 5, 250, 11, 93, 6, 100, 2, 5, 6, 6, 99, 80
        };         
        CountSmaller cs = new CountSmaller();
        long start = System.currentTimeMillis();
        List<Integer> output = cs.countSmaller(input);
        long elapse = System.currentTimeMillis() - start;
        System.out.printf("output: %s%n", output);
        System.out.printf("elapse time: %d%n", elapse);
    }

    public List<Integer> countSmaller(int[] nums) {
        int[] clone = Arrays.copyOf(nums, nums.length);
        Arrays.sort(clone);
        Map<Integer, Integer> ranks = new HashMap<>();
        int rank = 0;
        int old = clone[0];
        ranks.put(clone[0], rank);
        for (int i = 1; i < clone.length; i++) {
            if (clone[i] != old) {
                rank++;
                ranks.put(clone[i], rank);
                old = clone[i];
            }
        }

        LinkedList<Integer> output = new LinkedList<>();
        BIT frequencies = new BIT(new int[rank+1]);
        for (int i = nums.length-1; i >= 0; i--) {
            rank = ranks.get(nums[i]);
            frequencies.addDelta(rank, 1);
            output.addFirst(rank==0?0:frequencies.sum(rank-1));
        }
        
        return output; 
    }
}
